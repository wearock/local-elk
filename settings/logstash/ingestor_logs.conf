input {
  file {
    type => "Auth"
    path => "/var/logs/authws.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "(.+Exception: .+)|(.+at .+)|(.*Caused by:.+)|(\t.*)|(--- .*)"
      what => "previous"
    }
  }
  file {
    type => "Uploader"
    path => "/var/logs/uploadws_uploader.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "(.+Exception: .+)|(.+at .+)|(.*Caused by:.+)|(\t.*)"
      what => "previous"
    }
  }
  file {
    type => "Processor"
    path => "/var/logs/uploadws_processor.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "(.+Exception: .+)|(.+at .+)|(.*Caused by:.+)|(\t.*)"
      what => "previous"
    }
  }
  file {
    type => "SupportTool"
    path => "/var/logs/supporttool.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "(.+Exception: .+)|(.+at .+)|(.*Caused by:.+)|(\t.*)|([@ ]*)"
      what => "previous"
    }
  }
  file {
    type => "Translator"
    path => "/var/logs/translator/translator_info.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "(.+Exception: .+)|(.+at .+)|(.*Caused by:.+)|([\t ].*)"
      what => "previous"
    }
  }
  file {
    type => "API"
    path => "/var/logs/ibex-api/api.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "(.+Exception: .+)|(.+at .+)|(.*Caused by:.+)|([\t ].*)|([@ ]*)"
      what => "previous"
    }
  }
}

filter {
  if [type] == "Auth" {
    grok {
      match => { "message" => "(?m)%{TIME:datetime} \[%{DATA:process}\] %{LOGLEVEL:level}(?m)%{GREEDYDATA:content}"}
    }
  }
  else if [type] == "Uploader" {
    grok {
      match => { "message" => "(?m)%{DATESTAMP:datetime} \[%{DATA:process}\] %{LOGLEVEL:level}(?m)%{GREEDYDATA:content}"}
    }
  }
  else if [type] == "Processor" {
    grok {
      match => { "message" => "(?m)\[%{DATA:process}\] %{LOGLEVEL:level}(?m)%{GREEDYDATA:content}"}
    }
  }
  else if [type] == "SupportTool" {
    grok {
      match => { "message" => "(?m)%{TIME:datetime} \[%{DATA:process}\] %{LOGLEVEL:level}(?m)%{GREEDYDATA:content}"}
    }
  }
  else if [type] == "Translator" {
    grok {
      match => { "message" => "(?m)%{TIMESTAMP_ISO8601:datetime} \[%{DATA:process}\] %{LOGLEVEL:level}(?m)%{GREEDYDATA:content}"}
    }
  }
  else if [type] == "API" {
    grok {
      match => { "message" => "(?m)%{LOGLEVEL:level} \[%{DATA:process}\](?m)%{GREEDYDATA:content}"}
    }
  }
}

output {
  elasticsearch {
    hosts => [ "elasticsearch:9200" ]
  }
}
